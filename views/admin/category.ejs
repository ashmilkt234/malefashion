<%- include('../partials/admin/header') %>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<link rel="stylesheet" href="/css/category.css" />
<link rel="stylesheet" href="/css/dashboard.css">
 <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<div class="container mt-5 p-4 bg-white rounded shadow">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Category</h3>
    <a href="/admin/addCategory" class="btn btn-primary">Add</a>
  </div>

  <table class="table table-bordered table-hover align-middle text-center">
    <thead class="table-light">
      <tr>
        <th>Category Name</th>
        <th>Description</th>
        <th>Offer Price</th>
        <th>Offer</th>
        <th>Status</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <% categories.reverse().forEach((category, index) => { %>
        <tr>
          <td><%= category.name %></td>
          <td><%= category.description %></td>
          <td><%= category.categoryOffer ? category.categoryOffer + '%' : '0%' %></td>
          <td>
            <% if (category.categoryOffer) { %>
              <button class="btn btn-danger btn-sm" onclick="removeOffer('<%= category._id %>')">Remove</button>
            <% } else { %>
              <button class="btn btn-success btn-sm" onclick="addOffer('<%= category._id %>')">Add Offer</button>
            <% } %>
          </td>
          <td>
  <% if (category.isListed) { %>
    <button class="btn btn-warning btn-sm" onclick="updateCategoryStatus('<%= category._id %>', false)">Unlist</button>
  <% } else { %>
    <button class="btn btn-success btn-sm" onclick="updateCategoryStatus('<%= category._id %>', true)">List</button>
  <% } %>
</td>

          <td>
            <a href="/admin/editCategory/<%= category._id %>"class="text-dark text-decoration-none"><i class="bi bi-pencil-square fs-5">edit</i></a>
          </td>
        </tr>
      <% }) %>
    </tbody>
  </table>

  <div class="d-flex justify-content-center mt-4">
    <nav aria-label="Page navigation">
      <ul class="pagination">
        <% if (currentPage > 1) { %>
          <li class="page-item"><a class="page-link" href="?page=<%= currentPage - 1 %>">&laquo; Previous</a></li>
        <% } %>
        <% for (let i = 1; i <= totalPages; i++) { %>
          <% if (i === currentPage) { %>
            <li class="page-item active"><span class="page-link"><%= i %></span></li>
          <% } else { %>
            <li class="page-item"><a class="page-link" href="?page=<%= i %>"><%= i %></a></li>
          <% } %>
        <% } %>
        <% if (currentPage < totalPages) { %>
          <li class="page-item"><a class="page-link" href="?page=<%= currentPage + 1 %>">Next &raquo;</a></li>
        <% } %>
      </ul>
    </nav>
  </div>
</div>

<script>



  async function addOffer(categoryId) {
    const { value: amount } = await Swal.fire({
      title: "Offer in percentage",
      input: "number",
      inputLabel: "Percentage",
      inputPlaceholder: "%",
      inputAttributes: {
        min: 1,
        max: 100
      },
      showCancelButton: true,
      confirmButtonText: "Add",
    });

    if (amount && !isNaN(amount) && amount > 0) {
      try {
        const response = await fetch("/admin/addCategoryOffer", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            percentage: amount,
            categoryId: categoryId,
          }),
        });

        const data = await response.json();
        if (response.ok && data.status === true) {
          Swal.fire("Success", "Offer has been added", "success").then(() => {
            location.reload();
          });
        } else {
          Swal.fire("Failed", data.message || "Adding offer failed", "error");
        }
      } catch (error) {
        Swal.fire("Error", "An error occurred while adding the offer", "error");
        console.error("Error adding offer", error);
      }
    } else if (amount !== undefined) {
      Swal.fire("Invalid", "Please enter a valid percentage greater than 0", "warning");
    }
  }

  async function removeOffer(categoryId) {
    const result = await Swal.fire({
      title: "Are you sure?",
      text: "This will remove the offer from the category.",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, remove it!",
      cancelButtonText: "Cancel",
    });

    if (result.isConfirmed) {
      try {
        const response = await fetch("/admin/removeCategoryOffer", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            categoryId: categoryId,
          }),
        });

        const data = await response.json();
        if (response.ok && data.status === true) {
          Swal.fire("Removed!", "The offer has been removed.", "success").then(() => {
            location.reload();
          });
        } else {
          Swal.fire("Failed", data.message || "Removing offer failed", "error");
        }
      } catch (error) {
        console.error("Error removing offer:", error);
        Swal.fire("Error", "An error occurred while removing the offer", "error");
      }
    }
  }
 async function toggleCategoryStatus(categoryId) {
    try {
      const response = await fetch("/admin/category/toggle-status", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ categoryId }),
      });

      const data = await response.json();
      if (response.ok && data.status) {
        Swal.fire("Updated", `Category is now ${data.newStatus}`, "success").then(() => {
          location.reload();
        });
      } else {
        Swal.fire("Failed", data.message || "Failed to toggle status", "error");
      }
    } catch (error) {
      console.error("Toggle error:", error);
      Swal.fire("Error", "An error occurred while toggling status", "error");
    }
  }
  async function updateCategoryStatus(id, toList) {
  const url = toList ? `/admin/listCategory?id=${id}` : `/admin/unlistCategory?id=${id}`;

  try {
    const response = await fetch(url);
    if (response.redirected || response.ok) {
      Swal.fire("Updated", `Category has been ${toList ? "listed" : "unlisted"}`, "success").then(() => {
        location.reload();
      });
    } else {
      Swal.fire("Failed", "Could not update status", "error");
    }
  } catch (err) {
    console.error(err);
    Swal.fire("Error", "An error occurred", "error");
  }
}


</script>
